name: 手动转存到阿里Docker

on:
  workflow_dispatch:
    inputs:
      image_name:
        description: '请填写需要拉取hub.docker的仓库名镜像名版本号如xhofe/alist:latest'
        required: true
        default: 'xiaoyaliu/alist:latest'
      aliname:
        description: '自定义阿里docker镜像名（避免镜像名重复），默认跟随上方的镜像名如alist'
        required: false
        default: ''
      name:
        description: '自定义阿里docker镜像的版本号，默认跟随上方的版本如latest'
        required: false
        default: ''
      amd64:
        description: '拉取x86_64架构'
        required: true
        default: true
        type: boolean
      i386:
        description: '拉取i386架构'
        required: true
        default: false
        type: boolean
      arm64:
        description: '拉取arm64架构'
        required: true
        default: false
        type: boolean
      armv7:
        description: '拉取armv7架构'
        required: true
        default: false
        type: boolean
      armv6:
        description: '拉取armv6架构'
        required: true
        default: false
        type: boolean
      armv5:
        description: '拉取armv5架构'
        required: true
        default: false
        type: boolean
      s390x:
        description: '拉取s390x架构'
        required: true
        default: false
        type: boolean
      
env:
  #阿里云地址 例如 registry.**.aliyuncs.com
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}" 

  #阿里云实例空间名字 
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"  

  #阿里云账户名 例如 abc@email.com
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"

  #阿里云实例密码 
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

  #输入的hub.docker仓库名
  line: "${{ github.event.inputs.image_name }}"
  name: "${{ github.event.inputs.name }}"
  aliname: "${{ github.event.inputs.aliname }}"
  #输入的架构
  amd64: "${{ github.event.inputs.amd64 }}"
  i386: "${{ github.event.inputs.i386 }}"
  arm64: "${{ github.event.inputs.arm64 }}"
  armv7: "${{ github.event.inputs.armv7 }}"
  armv6: "${{ github.event.inputs.armv6 }}"
  armv5: "${{ github.event.inputs.armv5 }}"
  s390x: "${{ github.event.inputs.s390x }}"

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 登录阿里docker
      run: echo $ALIYUN_REGISTRY_PASSWORD | docker login $ALIYUN_REGISTRY -u $ALIYUN_REGISTRY_USER --password-stdin 

    - name: 获取docker信息
      run: |
          # 获取输入仓库的镜像名:版本号  例如nginx:1.25.3
          image_name_tag=$(echo "$line" | awk -F'/' '{print $NF}')
          # 获取镜像名例  例如nginx
          image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
          image_tag=$(echo "$image_name_tag" | awk -F':' '{print $2}')
          [[ -n "$aliname" ]] && image_name_tag="${aliname}:$image_tag"
          [[ -n "$aliname" ]] && image_name=$aliname
          echo "image_name_tag=${image_name_tag}" >> $GITHUB_ENV
          echo "image_name=${image_name}" >> $GITHUB_ENV
          echo "image_tag=${image_tag}" >> $GITHUB_ENV
          mkdir -p /opt/out

    - name: 拉取x86_64架构
      if: github.event.inputs.amd64 == 'true'
      run: |
          docker pull --platform=linux/amd64 $line
          new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/${image_name}:amd64"
          echo "将拉取的$line x86_64架构镜像更名为 $new_image"
          docker tag $line $new_image
          echo "将更名后的镜像$new_image 推送到阿里docker"
          docker push $new_image
          echo "清理本地镜像$line ..."
          docker rmi $line
          docker save $new_image -o /opt/out/${image_name}-${image_tag}_x86_64.tar
          echo "AMD64=${new_image}" >> $GITHUB_ENV

    - name: 拉取386架构
      if: github.event.inputs.i386 == 'true'
      run: |
          docker pull --platform=linux/i386 $line
          new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/${image_name}:i386"
          echo "将拉取的$line i386架构镜像更名为 $new_image"
          docker tag $line $new_image
          echo "将更名后的镜像$new_image 推送到阿里docker"
          docker push $new_image
          echo "清理本地镜像$line ..."
          docker rmi $line
          docker save $new_image -o /opt/out/${image_name}-${image_tag}_i386.tar
          echo "I386=${new_image}" >> $GITHUB_ENV

    - name: 拉取arm64架构
      if: github.event.inputs.arm64 == 'true'
      run: |
          docker pull --platform=linux/arm64 $line
          new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/${image_name}:arm64"
          echo "将拉取的$line arm64架构镜像更名为 $new_image"
          docker tag $line $new_image
          echo "将更名后的镜像$new_image 推送到阿里docker"
          docker push $new_image
          echo "清理本地镜像$line ..."
          docker rmi $line
          docker save $new_image -o /opt/out/${image_name}-${image_tag}_arm64.tar 
          echo "ARM64=${new_image}" >> $GITHUB_ENV

    - name: 拉取armv7架构
      if: github.event.inputs.armv7 == 'true'
      run: |
          docker pull --platform=linux/arm/v7 $line
          new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/${image_name}:armv7"
          echo "将拉取的$line armv7架构镜像更名为 $new_image"
          docker tag $line $new_image
          echo "将更名后的镜像$new_image 推送到阿里docker"
          docker push $new_image
          echo "清理本地镜像$line ..."
          docker rmi $line
          docker save $new_image -o /opt/out/${image_name}-${image_tag}_armv7.tar 
          echo "ARMV7=${new_image}" >> $GITHUB_ENV

    - name: 拉取armv6架构
      if: github.event.inputs.armv6 == 'true'
      run: |
          docker pull --platform=linux/arm/v6 $line
          new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/${image_name}:armv6"
          echo "将拉取的$line armv6架构镜像更名为 $new_image"
          docker tag $line $new_image
          echo "将更名后的镜像$new_image 推送到阿里docker"
          docker push $new_image
          echo "清理本地镜像$line ..."
          docker rmi $line
          docker save $new_image -o /opt/out/${image_name}-${image_tag}_armv6.tar 
          echo "ARMV6=${new_image}" >> $GITHUB_ENV

    - name: 拉取armv5架构
      if: github.event.inputs.armv5 == 'true'
      run: |
          docker pull --platform=linux/arm/v5 $line
          new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/${image_name}:armv5"
          echo "将拉取的$line armv5架构镜像更名为 $new_image"
          docker tag $line $new_image
          echo "将更名后的镜像$new_image 推送到阿里docker"
          docker push $new_image
          echo "清理本地镜像$line ..."
          docker rmi $line
          docker save $new_image -o /opt/out/${image_name}-${image_tag}_armv5.tar
          echo "ARMV5=${new_image}" >> $GITHUB_ENV

    - name: 拉取s390x架构
      if: github.event.inputs.s390x == 'true'
      run: |
          docker pull --platform=linux/s390x $line
          new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/${image_name}:s390x"
          echo "将拉取的$line s390x架构镜像更名为 $new_image"
          docker tag $line $new_image
          echo "将更名后的镜像$new_image 推送到阿里docker"
          docker push $new_image
          echo "清理本地镜像$line ..."
          docker rmi $line
          docker save $new_image -o /opt/out/${image_name}-${image_tag}_s390x.tar
          echo "S390X=${new_image}" >> $GITHUB_ENV

    - name: 合并多架构清单
      run: |
          #docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY
          
          echo "合并多架构清单:"
          echo "$AMD64"
          echo "$I386"
          echo "$ARM64"
          echo "$ARMV7"
          echo "$ARMV6"
          echo "$ARMV5"
          echo "$S390X"
          echo "到$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$image_name_tag"
          docker manifest create $ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$image_name_tag $AMD64 $I386 $ARM64 $ARMV7 $ARMV6 $ARMV5 $S390X
          docker manifest push $ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$image_name_tag
          docker manifest rm $ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$image_name_tag

          if [[ -n "$name" ]] && [[ "$name" != "$image_tag" ]] ; then
             echo "再合并到$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/${image_name}:$name"
             docker manifest create $ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/${image_name}:$name $AMD64 $I386 $ARM64 $ARMV7 $ARMV6 $ARMV5 $S390X
             docker manifest push $ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/${image_name}:$name
             docker manifest rm $ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/${image_name}:$name
          fi

          sudo rm -rf /home/runner/.docker/
          sudo rm -rf /root/.docker/
    - name: 上传
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.image_name }}-${{ env.image_tag }}
        path: /opt/out/*
